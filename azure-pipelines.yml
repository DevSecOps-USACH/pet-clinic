pool:
  vmImage: ubuntu-latest
stages:
- stage: Build 
  jobs:
  - job: build
    displayName: 'Build'
    steps:
    - task: Gradle@3
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'build'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        sonarQubeRunAnalysis: false
        spotBugsAnalysis: false

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)'
        contents: |
            **/build/libs/*.jar
        targetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: appJar
        publishLocation: 'Container'

#- job: horusec
#  workspace:
#    clean: all
#  displayName: Horusec
#  steps:
#    - script: |
#        curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh | bash -s latest
#        horusec start -p ./src   
- stage: Test 
  jobs:
  - job: sonar
    workspace:
      clean: all
    displayName:  Code Review
    steps:
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'Sonarcloud'
          organization: 'devsecops-usach'
          projectKey: 'DevSecOps-USACH_spring-clinic'
          projectName: 'spring-clinic'
        displayName: 'Preparing Sonarqube Environment'
    
      - task: Gradle@3
        inputs:
          gradleWrapperFile: 'gradlew'
          tasks: "sonarqube"
          javaHomeOption: 'JDKVersion'
          sonarQubeRunAnalysis: true
          sqGradlePluginVersionChoice: 'specify'
          sonarQubeGradlePluginVersion: '3.3'
        displayName: 'Analyze current Branch'
    
  
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'
        displayName: 'Publish Analysis Results'
    
  #- task: sonarcloud-buildbreaker@2
  #  inputs:
  #    SonarCloud: 'Sonarcloud'
  #    organization: 'devsecops-usach'

  - job: sca
    steps:
    - task: dependency-check-build-task@6
      inputs:
        projectName: 'pet-clinic'
        scanPath: '$(Pipeline.Workspace)'
        format: 'HTML'
      displayName: SCA
    
- stage: Deploy 
  jobs:  
  - job: buildimage
    displayName:  Build Image
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'appJar'
        downloadPath: '$(Pipeline.Workspace)'
      displayName: Descarga Jar

    - script: "mkdir -p build/libs; mv $(Pipeline.Workspace)/appJar/build/libs/ build/; chmod -R 555 build/libs"  
      displayName:  Se mueve jar a carpeta raiz
    
  - job: Docker
    dependsOn: buildimage
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'Docker'
        command: 'login'
      displayName: Docker registry login
    
    - task: Docker@2
      inputs:
        containerRegistry: 'Docker'
        repository: 'clagosu/pet-clinic'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: latest
      displayName: Build Image

    - script: | 
       sudo apt-get install -y rpm
       wget https://github.com/aquasecurity/trivy/releases/download/v0.27.1/trivy_0.27.1_Linux-64bit.deb
       sudo dpkg -i trivy_0.27.1_Linux-64bit.deb
       trivy image clagosu/pet-clinic:latest
      displayName: Image Scan
  
    - task: Docker@2
      displayName: Docker push
      inputs:
        containerRegistry: 'Docker'
        repository: 'clagosu/pet-clinic'
        command: 'push'
        tags: 'latest'

  - job: Kubernetes
    steps:
  #- task: KubernetesManifest@0
  #  inputs:
  #    action: 'deploy'
  #    kubernetesServiceConnection: 'Kubernetes'
  #    namespace: 'default'
  #    manifests: 'deployment-app.yaml'
      - task: KubectlInstaller@0
        inputs:
          kubectlVersion: 'latest'
      
      - task: Kubernetes@1
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'Kubernetes'
          namespace: 'default'
          command: 'login'

      - task: Kubernetes@1
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'Kubernetes'
          namespace: 'default'
          command: 'apply'
          arguments: '-f kubernetes/deployment-app.yaml'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Azure Container Registry'
          azureSubscriptionEndpointForSecrets: 'azure(9909fced-8203-44b6-af68-11f833a37e60)'
